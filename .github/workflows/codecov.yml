# Copyright (C) 2023 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Run Codecov

on:
  push:
    branches: [main]
    paths:
      - ".github/codecov.yml"
      - ".github/workflows/codecov.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/integration/**"
      - "test/units/**"
      - "test/utils/devel/collect_coverage_data.py"
      - "CMakeLists.txt"
      - "conanfile.py"
    tags:
      - "v*.*.*"

  pull_request:
    paths:
      - ".github/codecov.yml"
      - ".github/workflows/codecov.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/integration/**"
      - "test/units/**"
      - "test/utils/devel/collect_coverage_data.py"
      - "CMakeLists.txt"
      - "conanfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  cache-test-dataset:
    uses: paulsengroup/hictk/.github/workflows/cache-test-dataset.yml@main
    name: Cache test dataset

  build-project:
    name: Build project
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-24.04-cxx-clang-19
      options: "--user=root"

    outputs:
      ccache-old-cache-key: ${{ steps.cache-ccache.outputs.cache-matched-key }}

    env:
      CCACHE_DIR: "/opt/ccache-cache"
      CCACHE_COMPILERCHECK: "content"
      CCACHE_COMPRESSLEVEL: "1"
      CCACHE_MAXSIZE: "500M"
      CONAN_HOME: "/opt/conan/"

    steps:
      - uses: actions/checkout@v4

      - name: Fix permissions
        run: |
          chown -R $(id -u):$(id -g) $PWD

      - name: Generate cache key
        id: cache-key
        run: |
          conanfile_hash="${{ hashFiles('conanfile.py') }}"

          # This can be used by to always update a cache entry (useful e.g. for ccache)
          current_date="$(date '+%s')"

          ccache_key_prefix="codecov-ccache-$conanfile_hash"

          echo "conan-key=codecov-$conanfile_hash" | tee -a "$GITHUB_OUTPUT"
          echo "ccache-key=${ccache_key_prefix}-${current_date}" | tee -a "$GITHUB_OUTPUT"
          echo "ccache-restore-key=$ccache_key_prefix" | tee -a "$GITHUB_OUTPUT"

      - name: Restore Conan cache
        id: cache-conan
        uses: actions/cache/restore@v4
        with:
          key: conan-${{ steps.cache-key.outputs.conan-key }}
          path: ${{ env.CONAN_HOME }}/p

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source
          conan remove --confirm "*"

      - name: Copy Conan settings
        run: |
          if [ ! -f "$CONAN_HOME/settings.yml" ]; then
            cp "/root/.conan2/settings.yml" "$CONAN_HOME"
          fi

      - name: Install build dependencies
        run: |
          conan install .                        \
             --build=missing                     \
             -pr:b="$CONAN_DEFAULT_PROFILE_PATH" \
             -pr:h="$CONAN_DEFAULT_PROFILE_PATH" \
             -s build_type=RelWithDebInfo        \
             -s compiler.libcxx=libstdc++11      \
             -s compiler.cppstd=17               \
             --output-folder=build

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source

      - name: Save Conan cache
        uses: actions/cache/save@v4
        if: steps.cache-conan.outputs.cache-hit != 'true'
        with:
          key: conan-${{ steps.cache-key.outputs.conan-key }}
          path: ${{ env.CONAN_HOME }}/p
        env:
          ZSTD_CLEVEL: 19

      - name: Configure project
        run: |
          cov_flags='-fprofile-instr-generate -fcoverage-mapping -fcoverage-mcdc'

          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo        \
                -DCMAKE_PREFIX_PATH="$PWD/build"         \
                -DHICTK_BUILD_EXAMPLES=OFF               \
                -DHICTK_ENABLE_TESTING=ON                \
                -DHICTK_ENABLE_FUZZY_TESTING=OFF         \
                -DHICTK_DOWNLOAD_TEST_DATASET=OFF        \
                -DHICTK_ENABLE_GIT_VERSION_TRACKING=OFF  \
                -DCMAKE_C_FLAGS="$cov_flags"             \
                -DCMAKE_CXX_FLAGS="$cov_flags"           \
                -DCMAKE_STATIC_LINKER_FLAGS="$cov_flags" \
                -S .                                     \
                -B build

      - name: Restore Ccache folder
        id: cache-ccache
        uses: actions/cache/restore@v4
        with:
          key: ${{ steps.cache-key.outputs.ccache-restore-key }}
          path: ${{ env.CCACHE_DIR }}

      - name: Reset Ccache stats
        run: ccache --zero-stats

      - name: Build project
        run: cmake --build build -j $(nproc)

      - name: Package build folder
        run: tar -cf - build/ | zstd -T0 -13 -o build.tar.zst

      - name: Upload build folder
        uses: actions/upload-artifact@v4
        with:
          name: "build-codecov"
          path: build.tar.zst
          if-no-files-found: error
          retention-days: 1

      - name: Print Ccache statistics (pre-cleanup)
        run: |
          ccache --show-stats \
                 --show-compression \
                 --verbose

      - name: Cleanup Ccache folder
        run: |
          ccache --evict-older-than=14400s # 4h
          ccache --recompress=19 --recompress-threads="$(nproc)"
          ccache --cleanup

      - name: Print Ccache statistics (post-cleanup)
        run: |
          ccache --show-stats \
                 --show-compression \
                 --verbose

      - name: Save Ccache folder
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-key.outputs.ccache-key }}
          path: ${{ env.CCACHE_DIR }}
        env:
          ZSTD_CLEVEL: 1

  clean-stale-cache:
    needs: [build-project]
    uses: paulsengroup/hictk/.github/workflows/evict-gha-cache.yml@main
    name: Clean stale Ccache cache
    permissions:
      actions: write
    if: needs.build-project.outputs.ccache-old-cache-key != ''
    with:
      cache-key: "${{ needs.build-project.outputs.ccache-old-cache-key }}"

  run-unit-tests:
    name: Run unit tests
    needs: [cache-test-dataset, build-project]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-24.04-cxx-clang-19
      options: "--user=root"

    env:
      HICTK_CI: "1"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore test dataset
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.cache-test-dataset.outputs.cache-key }}
          path: test/data/hictk_test_data.tar.zst
          fail-on-cache-miss: true

      - name: Download unit tests artifact
        uses: actions/download-artifact@v4
        with:
          name: "build-codecov"

      - name: Extract binaries and test dataset
        run: |
          tar -xf build.tar.zst
          tar -xf test/data/hictk_test_data.tar.zst

      - name: Add test user
        run: useradd devel

      - name: Fix permissions
        run: |
          chown -R devel:devel build/

      - name: Setup dependencies
        run: |
          apt-get update
          apt-get install -q -y --no-install-recommends \
            gpg \
            gpg-agent \
            sudo \
            tar

      - name: Run unit tests
        run: |
          LLVM_PROFILE_FILE="hictk.unittest.$(nproc).profraw"

          sudo -u devel                                      \
               -E env "PATH=$PATH"                           \
                      "LLVM_PROFILE_FILE=$LLVM_PROFILE_FILE" \
          ctest --test-dir build/                            \
                --schedule-random                            \
                --output-on-failure                          \
                --no-tests=error                             \
                --timeout 240                                \
                -j $(nproc) |&
          head -n 1000

      - name: Collect coverage data
        run: |
          readarray -t -d '' binaries < <(find build/test/units/ -type f -executable | xargs printf '%q\0')

          utils/devel/collect_coverage_data.py   \
            --output-dir coverage/               \
            --prefix="hictk.unittest"            \
            --format text                        \
            --llvm-cov-bin llvm-cov-19           \
            --llvm-profdata-bin llvm-profdata-19 \
            "${binaries[@]}"

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          flags: "tests | unittests"
          fail_ci_if_error: true
          handle_no_reports_found: true
          directory: coverage
          os: linux
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  run-integration-tests:
    name: Run integration tests
    needs: [cache-test-dataset, build-project]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-24.04-cxx-clang-19
      options: "--user=root"

    env:
      HICTK_CI: "1"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore test dataset
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.cache-test-dataset.outputs.cache-key }}
          path: test/data/hictk_test_data.tar.zst
          fail-on-cache-miss: true

      - name: Download binaries artifact
        uses: actions/download-artifact@v4
        with:
          name: "build-codecov"

      - name: Extract binaries and test dataset
        run: |
          tar -xf build.tar.zst
          tar -xf test/data/hictk_test_data.tar.zst

      - name: Install test suite
        run: |
          python3.12 -m venv venv --upgrade
          venv/bin/pip install test/integration

      - name: Add test user
        run: useradd devel

      - name: Fix permissions
        run: |
          chown -R devel:devel build/

      - name: Setup dependencies
        run: |
          apt-get update
          apt-get install -q -y --no-install-recommends \
            gpg \
            gpg-agent \
            sudo \
            tar

      - name: Test hictk balance
        run: |
          sudo -u devel                                        \
          -E env "PATH=$PATH"                                  \
                 "LLVM_PROFILE_FILE=hictk.balance.%id.profraw" \
          venv/bin/hictk_integration_suite                     \
            build/src/hictk/hictk                              \
            test/integration/config.toml                       \
            --do-not-copy-binary                               \
            --data-dir test/data                               \
            --threads "$(nproc)"                               \
            --result-file integration-test-report.balance.json \
            --suites=balance

      - name: Test hictk convert
        run: |
          sudo -u devel                                        \
          -E env "PATH=$PATH"                                  \
                 "LLVM_PROFILE_FILE=hictk.convert.%id.profraw" \
          venv/bin/hictk_integration_suite                     \
            build/src/hictk/hictk                              \
            test/integration/config.toml                       \
            --do-not-copy-binary                               \
            --data-dir test/data                               \
            --threads "$(nproc)"                               \
            --result-file integration-test-report.convert.json \
            --suites=convert

      - name: Test hictk dump
        run: |
          sudo -u devel                                        \
          -E env "PATH=$PATH"                                  \
                 "LLVM_PROFILE_FILE=hictk.dump.%id.profraw"    \
          venv/bin/hictk_integration_suite                     \
            build/src/hictk/hictk                              \
            test/integration/config.toml                       \
            --do-not-copy-binary                               \
            --data-dir test/data                               \
            --threads "$(nproc)"                               \
            --result-file integration-test-report.dump.json    \
            --suites=dump

      - name: Test hictk fix-mcool
        run: |
          sudo -u devel                                          \
          -E env "PATH=$PATH"                                    \
                 "LLVM_PROFILE_FILE=hictk.fix-mcool.%id.profraw" \
          venv/bin/hictk_integration_suite                       \
            build/src/hictk/hictk                                \
            test/integration/config.toml                         \
            --do-not-copy-binary                                 \
            --data-dir test/data                                 \
            --threads "$(nproc)"                                 \
            --result-file integration-test-report.fix-mcool.json \
            --suites=fix-mcool

      - name: Test hictk load
        run: |
          sudo -u devel                                     \
          -E env "PATH=$PATH"                               \
                 "LLVM_PROFILE_FILE=hictk.load.%id.profraw" \
          venv/bin/hictk_integration_suite                  \
            build/src/hictk/hictk                           \
            test/integration/config.toml                    \
            --do-not-copy-binary                            \
            --data-dir test/data                            \
            --threads "$(nproc)"                            \
            --result-file integration-test-report.load.json \
            --suites=load

      - name: Test hictk merge
        run: |
          sudo -u devel                                      \
          -E env "PATH=$PATH"                                \
                 "LLVM_PROFILE_FILE=hictk.merge.%id.profraw" \
          venv/bin/hictk_integration_suite                   \
            build/src/hictk/hictk                            \
            test/integration/config.toml                     \
            --do-not-copy-binary                             \
            --data-dir test/data                             \
            --threads "$(nproc)"                             \
            --result-file integration-test-report.merge.json \
            --suites=merge

      - name: Test hictk metadata
        run: |
          sudo -u devel                                         \
          -E env "PATH=$PATH"                                   \
                 "LLVM_PROFILE_FILE=hictk.metadata.%id.profraw" \
          venv/bin/hictk_integration_suite                      \
            build/src/hictk/hictk                               \
            test/integration/config.toml                        \
            --do-not-copy-binary                                \
            --data-dir test/data                                \
            --threads "$(nproc)"                                \
            --result-file integration-test-report.metadata.json \
            --suites=metadata

      - name: Test hictk rename-chromosomes
        run: |
          sudo -u devel                                                   \
          -E env "PATH=$PATH"                                             \
                 "LLVM_PROFILE_FILE=hictk.rename-chromosomes.%id.profraw" \
          venv/bin/hictk_integration_suite                                \
            build/src/hictk/hictk                                         \
            test/integration/config.toml                                  \
            --do-not-copy-binary                                          \
            --data-dir test/data                                          \
            --threads "$(nproc)"                                          \
            --result-file integration-test-report.rename-chromosomes.json \
            --suites=rename-chromosomes

      - name: Test hictk validate
        run: |
          sudo -u devel                                         \
          -E env "PATH=$PATH"                                   \
                 "LLVM_PROFILE_FILE=hictk.validate.%id.profraw" \
          venv/bin/hictk_integration_suite                      \
            build/src/hictk/hictk                               \
            test/integration/config.toml                        \
            --do-not-copy-binary                                \
            --data-dir test/data                                \
            --threads "$(nproc)"                                \
            --result-file integration-test-report.validate.json \
            --suites=validate

      - name: Test hictk zoomify
        run: |
          sudo -u devel                                        \
          -E env "PATH=$PATH"                                  \
                 "LLVM_PROFILE_FILE=hictk.zoomify.%id.profraw" \
          venv/bin/hictk_integration_suite                     \
            build/src/hictk/hictk                              \
            test/integration/config.toml                       \
            --do-not-copy-binary                               \
            --data-dir test/data                               \
            --threads "$(nproc)"                               \
            --result-file integration-test-report.zoomify.json \
            --suites=zoomify

      - name: Collect coverage data
        run: |
          utils/devel/collect_coverage_data.py   \
            --output-dir coverage/               \
            --prefix="hictk"                     \
            --format text                        \
            --llvm-cov-bin llvm-cov-19           \
            --llvm-profdata-bin llvm-profdata-19 \
            build/src/hictk/hictk

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          flags: "tests | integration"
          fail_ci_if_error: true
          handle_no_reports_found: true
          directory: coverage
          os: linux
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  codecov-status-check:
    name: Status Check (Codecov)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - cache-test-dataset
      - build-project
      - run-unit-tests
      - run-integration-tests

    steps:
      - name: Collect job results
        if: |
          needs.cache-test-dataset.result != 'success' ||
          needs.build-project.result != 'success'      ||
          needs.run-unit-tests.result != 'success'     ||
          needs.run-integration-tests.result != 'success'
        run: exit 1
