# Copyright (C) 2024 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Test packaging

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/packaging.yml"
      - "cmake/**"
      - "src/**"
      - "test/packaging/**"
      - "CMakeLists.txt"
      - "conanfile.py"
    tags:
      - "v*.*.*"

  pull_request:
    paths:
      - ".github/workflows/packaging.yml"
      - "cmake/**"
      - "src/**"
      - "test/packaging/**"
      - "CMakeLists.txt"
      - "conanfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  CONAN_HOME: "/opt/conan/"
  HICTK_CI: "1"

jobs:
  build-deps:
    runs-on: ubuntu-latest
    name: Build dependencies
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-24.04-cxx-clang-18
      options: "--user=root"

    outputs:
      cache-key: ${{ steps.generate-cache-key.outputs.conan-key }}

    steps:
      - uses: actions/checkout@v4

      - name: Fix permissions
        run: |
          chown -R $(id -u):$(id -g) $PWD

      - name: Generate cache key
        id: generate-cache-key
        run: |
          hash="${{ hashFiles('conanfile.py', '.github/workflows/packaging.yml') }}"
          echo "conan-key=packaging-$hash" >> $GITHUB_OUTPUT

      - name: Restore Conan cache
        id: cache-conan
        uses: actions/cache/restore@v4
        with:
          key: ${{ steps.generate-cache-key.outputs.conan-key }}
          path: ${{ env.CONAN_HOME }}

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source
          conan remove --confirm "*"

      - name: Copy Conan settings
        run: |
          if [ ! -f "$CONAN_HOME/settings.yml" ]; then
            cp "/root/.conan2/settings.yml" "$CONAN_HOME"
          fi

      - name: Install build dependencies
        run: |
          conan install .                        \
             --build=missing                     \
             -pr:b="$CONAN_DEFAULT_PROFILE_PATH" \
             -pr:h="$CONAN_DEFAULT_PROFILE_PATH" \
             -s build_type=Release               \
             -s compiler.libcxx=libstdc++11      \
             -s compiler.cppstd=17               \
             --output-folder=build

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source

      - name: Save Conan cache
        uses: actions/cache/save@v4
        if: steps.cache-conan.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.generate-cache-key.outputs.conan-key }}
          path: ${{ env.CONAN_HOME }}

  test-find-package:
    runs-on: ubuntu-latest
    name: Test find_package()
    needs: [build-deps]
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-24.04-cxx-clang-18
      options: "--user=root"

    steps:
      - uses: actions/checkout@v4

      - name: Fix permissions
        run: |
          chown -R $(id -u):$(id -g) $PWD

      - name: Restore Conan cache
        id: cache-conan
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.build-deps.outputs.cache-key }}
          path: ${{ env.CONAN_HOME }}
          fail-on-cache-miss: true

      - name: Install build dependencies
        run: |
          conan install .                        \
             --build=missing                     \
             -pr:b="$CONAN_DEFAULT_PROFILE_PATH" \
             -pr:h="$CONAN_DEFAULT_PROFILE_PATH" \
             -s build_type=Release               \
             -s compiler.libcxx=libstdc++11      \
             -s compiler.cppstd=17               \
             --output-folder=build

      - name: Configure project
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DHICTK_ENABLE_TESTING=OFF \
                -DHICTK_BUILD_TOOLS=OFF \
                -DCMAKE_PREFIX_PATH="$PWD/build" \
                -DCMAKE_INSTALL_PREFIX=hictk_install \
                -S . \
                -B hictk_build

      - name: Install hictk
        run: |
          cmake --build hictk_build/
          cmake --install hictk_build/

      - name: Configure test project
        run: |
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$PWD/build;$PWD/hictk_install/lib/cmake/hictk/" \
            -S test/packaging/test_find_package \
            -B test_find_package_build

      - name: Build test project
        run: |
          cmake --build test_find_package_build

      - name: Test binary
        run: |
          test_find_package_build/hictk_test_find_package

  test-add-subdirectory:
    runs-on: ubuntu-latest
    name: Test add_subdirectory()
    needs: [build-deps]
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-24.04-cxx-clang-18
      options: "--user=root"

    steps:
      - uses: actions/checkout@v4

      - name: Fix permissions
        run: |
          chown -R $(id -u):$(id -g) $PWD

      - name: Restore Conan cache
        id: cache-conan
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.build-deps.outputs.cache-key }}
          path: ${{ env.CONAN_HOME }}
          fail-on-cache-miss: true

      - name: Install build dependencies
        run: |
          conan install .                        \
             --build=missing                     \
             -pr:b="$CONAN_DEFAULT_PROFILE_PATH" \
             -pr:h="$CONAN_DEFAULT_PROFILE_PATH" \
             -s build_type=Release               \
             -s compiler.libcxx=libstdc++11      \
             -s compiler.cppstd=17               \
             --output-folder=build

      - name: Configure project
        run: |
          ln -s "$PWD" test/packaging/test_add_subdirectory/hictk_root

          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$PWD/build" \
            -S test/packaging/test_add_subdirectory \
            -B test_add_subdirectory_build

      - name: Build test project
        run: |
          cmake --build test_add_subdirectory_build

      - name: Test binary
        run: |
          test_add_subdirectory_build/hictk_test_add_subdirectory

  packaging-status-check:
    name: Status Check (packaging)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - build-deps
      - test-find-package
      - test-add-subdirectory

    steps:
      - name: Collect job results
        if: |
          needs.build-deps.result != 'success'            ||
          needs.test-find-package.result != 'success'     ||
          needs.test-add-subdirectory.result != 'success'
        run: exit 1
