# Copyright (C) 2023 Roberto Rossini <roberros@uio.no>
# SPDX-License-Identifier: MIT

name: Build Dockerfile

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/build-dockerfile.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/integration/**"
      - "utils/devel/test_docker_image.sh"
      - ".dockerignore"
      - "CMakeLists.txt"
      - "Dockerfile"
      - "conanfile.Dockerfile.py"
    tags:
      - "v*.*.*"

  pull_request:
    paths:
      - ".github/workflows/build-dockerfile.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/integration/**"
      - "utils/devel/test_docker_image.sh"
      - ".dockerignore"
      - "CMakeLists.txt"
      - "Dockerfile"
      - "conanfile.Dockerfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  cache-test-dataset:
    uses: paulsengroup/hictk/.github/workflows/cache-test-dataset.yml@ec6c8c43e445043aa05d189aa2799c949166cf27
    name: Cache test dataset

  build-dockerfile:
    name: Build Dockerfile
    needs: cache-test-dataset
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      packages: "write"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore test dataset
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.cache-test-dataset.outputs.cache-key }}
          path: test/data/hictk_test_data.tar.zst
          fail-on-cache-miss: true

      - name: Generate build args
        id: build-args
        run: |
          set -e
          set -u
          set -o pipefail

          OS_NAME='ubuntu'
          OS_VERSION='22.04'
          C_COMPILER='clang-19'
          CXX_COMPILER='clang++-19'

          BUILD_BASE_IMAGE="ghcr.io/paulsengroup/ci-docker-images/$OS_NAME-$OS_VERSION-cxx-$C_COMPILER:latest"
          TEST_BASE_IMAGE="$BUILD_BASE_IMAGE"

          FINAL_BASE_IMAGE="docker.io/library/$OS_NAME"
          FINAL_BASE_IMAGE_TAG="$OS_VERSION"
          sudo docker pull "$FINAL_BASE_IMAGE:$FINAL_BASE_IMAGE_TAG"

          FINAL_BASE_IMAGE_DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "$FINAL_BASE_IMAGE:$FINAL_BASE_IMAGE_TAG" | grep -o '[[:alnum:]:]\+$')"

          GIT_HASH="$(git rev-parse HEAD)"
          GIT_SHORT_HASH="$(git rev-parse --short HEAD)"
          CREATION_DATE="$(date --iso-8601)"
          GIT_TAG="$(git for-each-ref 'refs/tags/v*.*.*' --count 1 --sort=-v:refname --format "%(refname:short)"  --points-at HEAD)"
          if [ -z "$GIT_TAG" ]; then
            VERSION="sha-$GIT_SHORT_HASH"
          GIT_TAG=unknown
          else
            VERSION="$GIT_TAG"
          fi

          CACHE_REGISTRY='ghcr.io/${{ github.repository }}:buildcache'

          echo "C_COMPILER=$C_COMPILER" | tee -a "$GITHUB_OUTPUT"
          echo "CXX_COMPILER=$CXX_COMPILER" | tee -a "$GITHUB_OUTPUT"
          echo "FINAL_BASE_IMAGE=$FINAL_BASE_IMAGE" | tee -a "$GITHUB_OUTPUT"
          echo "FINAL_BASE_IMAGE_TAG=$FINAL_BASE_IMAGE_TAG" | tee -a "$GITHUB_OUTPUT"
          echo "BUILD_BASE_IMAGE=$BUILD_BASE_IMAGE" | tee -a "$GITHUB_OUTPUT"
          echo "TEST_BASE_IMAGE=$TEST_BASE_IMAGE" | tee -a "$GITHUB_OUTPUT"
          echo "FINAL_BASE_IMAGE_DIGEST=$FINAL_BASE_IMAGE_DIGEST" | tee -a "$GITHUB_OUTPUT"
          echo "GIT_HASH=$GIT_HASH" | tee -a "$GITHUB_OUTPUT"
          echo "GIT_SHORT_HASH=$GIT_SHORT_HASH" | tee -a "$GITHUB_OUTPUT"
          echo "CREATION_DATE=$CREATION_DATE" | tee -a "$GITHUB_OUTPUT"
          echo "GIT_TAG=$GIT_TAG" | tee -a "$GITHUB_OUTPUT"
          echo "VERSION=$VERSION" | tee -a "$GITHUB_OUTPUT"
          echo "CACHE_REGISTRY_X86=$CACHE_REGISTRY-x86" | tee -a "$GITHUB_OUTPUT"
          echo "CACHE_REGISTRY_ARM64=$CACHE_REGISTRY-arm64" | tee -a "$GITHUB_OUTPUT"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: ${{ github.repository }},ghcr.io/${{ github.repository }}
          flavor: |
            latest=true
          tags: |
            type=semver,priority=1000,pattern={{version}}
            type=sha,priority=900
            type=ref,priority=700,event=branch
            type=ref,priority=600,event=pr

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up QEMU
        if: github.event_name != 'pull_request'
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # v3.3.0
        with:
          platforms: arm64

      - name: Build Docker image (x86)
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
        with:
          context: ${{ github.workspace }}
          load: true
          push: false
          cache-from: type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_X86 }}
          cache-to: type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_X86 }},mode=max,compression=zstd
          tags: hictk:x86
          platforms: linux/amd64
          build-args: |
            C_COMPILER=${{ steps.build-args.outputs.C_COMPILER }}
            CXX_COMPILER=${{ steps.build-args.outputs.CXX_COMPILER }}
            BUILD_BASE_IMAGE=${{ steps.build-args.outputs.BUILD_BASE_IMAGE }}
            TEST_BASE_IMAGE=${{ steps.build-args.outputs.TEST_BASE_IMAGE }}
            FINAL_BASE_IMAGE=${{ steps.build-args.outputs.FINAL_BASE_IMAGE }}
            FINAL_BASE_IMAGE_TAG=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_TAG }}
            FINAL_BASE_IMAGE_DIGEST=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_DIGEST }}
            GIT_HASH=${{ steps.build-args.outputs.GIT_HASH }}
            GIT_SHORT_HASH=${{ steps.build-args.outputs.GIT_SHORT_HASH }}
            CREATION_DATE=${{ steps.build-args.outputs.CREATION_DATE }}
            GIT_TAG=${{ steps.build-args.outputs.GIT_TAG }}
            GIT_IS_DIRTY=false
            VERSION=${{ steps.build-args.outputs.VERSION }}

      - name: Test Docker image (x86)
        run: utils/devel/test_docker_image.sh hictk:x86

      - name: Build Docker image (arm64)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
        with:
          context: ${{ github.workspace }}
          push: false
          cache-from: type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_ARM64 }}
          cache-to: type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_ARM64 }},mode=max,compression=zstd
          tags: hictk:arm64
          platforms: linux/arm64
          build-args: |
            C_COMPILER=${{ steps.build-args.outputs.C_COMPILER }}
            CXX_COMPILER=${{ steps.build-args.outputs.CXX_COMPILER }}
            BUILD_BASE_IMAGE=${{ steps.build-args.outputs.BUILD_BASE_IMAGE }}
            TEST_BASE_IMAGE=${{ steps.build-args.outputs.TEST_BASE_IMAGE }}
            FINAL_BASE_IMAGE=${{ steps.build-args.outputs.FINAL_BASE_IMAGE }}
            FINAL_BASE_IMAGE_TAG=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_TAG }}
            FINAL_BASE_IMAGE_DIGEST=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_DIGEST }}
            GIT_HASH=${{ steps.build-args.outputs.GIT_HASH }}
            GIT_SHORT_HASH=${{ steps.build-args.outputs.GIT_SHORT_HASH }}
            CREATION_DATE=${{ steps.build-args.outputs.CREATION_DATE }}
            GIT_TAG=${{ steps.build-args.outputs.GIT_TAG }}
            GIT_IS_DIRTY=false
            VERSION=${{ steps.build-args.outputs.VERSION }}

      - name: Push image to registries
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
        with:
          context: ${{ github.workspace }}
          push: true
          cache-from: |
            type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_X86 }}
            type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_ARM64 }}
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            C_COMPILER=${{ steps.build-args.outputs.C_COMPILER }}
            CXX_COMPILER=${{ steps.build-args.outputs.CXX_COMPILER }}
            BUILD_BASE_IMAGE=${{ steps.build-args.outputs.BUILD_BASE_IMAGE }}
            TEST_BASE_IMAGE=${{ steps.build-args.outputs.TEST_BASE_IMAGE }}
            FINAL_BASE_IMAGE=${{ steps.build-args.outputs.FINAL_BASE_IMAGE }}
            FINAL_BASE_IMAGE_TAG=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_TAG }}
            FINAL_BASE_IMAGE_DIGEST=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_DIGEST }}
            GIT_HASH=${{ steps.build-args.outputs.GIT_HASH }}
            GIT_SHORT_HASH=${{ steps.build-args.outputs.GIT_SHORT_HASH }}
            CREATION_DATE=${{ steps.build-args.outputs.CREATION_DATE }}
            GIT_TAG=${{ steps.build-args.outputs.GIT_TAG }}
            GIT_IS_DIRTY=false
            VERSION=${{ steps.build-args.outputs.VERSION }}

  build-dockerfile-status-check:
    name: Status Check (Build Dockerfile)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - build-dockerfile

    steps:
      - name: Collect job results
        if: needs.build-dockerfile.result != 'success'
        run: exit 1
