# Copyright (C) 2022 Roberto Rossini <roberros@uio.no>
# SPDX-License-Identifier: MIT

name: Run clang-tidy

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/run-clang-tidy.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/units/**"
      - "utils/devel/build_dependencies.py"
      - ".clang-tidy"
      - "CMakeLists.txt"
      - "conanfile.py"

  pull_request:
    paths:
      - ".github/workflows/run-clang-tidy.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/units/**"
      - "utils/devel/build_dependencies.py"
      - ".clang-tidy"
      - "CMakeLists.txt"
      - "conanfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build-deps:
    name: Build dependencies
    uses: paulsengroup/hictk/.github/workflows/build-conan-deps-linux.yml@3b94da98703f30ee9914f97362743056b00b280a
    with:
      image: "ghcr.io/paulsengroup/ci-docker-images/ubuntu-20.04-cxx-clang-21"
      conan-version: "2.21.*"
      build-type: Debug

  build-project:
    name: Build project
    needs: build-deps
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-24.04-cxx-clang-21
      options: "--user=root"

    env:
      CCACHE_DIR: "/opt/ccache-cache"
      CCACHE_COMPILERCHECK: "content"
      CCACHE_COMPRESSLEVEL: "1"
      CCACHE_MAXSIZE: "10G"
      TMPDIR: "/tmp/"

    steps:
      - uses: actions/checkout@v5

      - name: Fix permissions
        run: chown -R "$(id -u):$(id -g)" "$PWD"

      - name: Print clang-tidy version
        run: clang-tidy --version

      - name: Install Python headers
        run: |
          apt-get update
          apt-get install -y python3.12-dev

      - name: Generate cache key
        id: cache-key
        run: |
          deps_hash="$(echo '${{ needs.build-deps.outputs.cache-key }}' | sha256sum | cut -f 1 -d ' ')"

          # This can be used by to always update a cache entry (useful e.g. for ccache)
          current_date="$(date '+%s')"

          ccache_key_prefix="ccache-clang-tidy-$deps_hash"

          {
            echo "ccache-key=${ccache_key_prefix}-$GITHUB_REF-${current_date}"
            echo "ccache-restore-key-1=$ccache_key_prefix-$GITHUB_REF"
            echo "ccache-restore-key-2=$ccache_key_prefix"
          } | tee -a "$GITHUB_OUTPUT"

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.build-deps.outputs.cache-key }}
          path: ${{ needs.build-deps.outputs.tar }}
          fail-on-cache-miss: true

      - name: Unpack dependencies
        run: |
          tar -C "$TMPDIR" \
              --strip-components 1 \
              -xf '${{ needs.build-deps.outputs.tar }}'

      - name: Configure project
        run: |
          if ! lld -v &> /dev/null; then
            LINKER=SYSTEM
          else
            LINKER=LLD
          fi

          cmake -DCMAKE_BUILD_TYPE=Debug                      \
                -DCMAKE_CXX_STANDARD=17                       \
                -DCMAKE_LINKER_TYPE="$LINKER"                 \
                -DCMAKE_PREFIX_PATH="$TMPDIR/deps/cmake/"     \
                -DENABLE_DEVELOPER_MODE=ON                    \
                -DOPT_ENABLE_SANITIZER_ADDRESS=OFF            \
                -DOPT_ENABLE_SANITIZER_LEAK=OFF               \
                -DOPT_ENABLE_SANITIZER_POINTER_COMPARE=OFF    \
                -DOPT_ENABLE_SANITIZER_POINTER_SUBTRACT=OFF   \
                -DOPT_ENABLE_SANITIZER_UNDEFINED_BEHAVIOR=OFF \
                -DOPT_ENABLE_CPPCHECK=OFF                     \
                -DOPT_ENABLE_CLANG_TIDY=ON                    \
                -DHICTK_BUILD_BENCHMARKS=ON                   \
                -DHICTK_BUILD_EXAMPLES=ON                     \
                -DHICTK_ENABLE_TESTING=ON                     \
                -DHICTK_ENABLE_FUZZY_TESTING=ON               \
                -DHICTK_DOWNLOAD_TEST_DATASET=OFF             \
                -DHICTK_ENABLE_GIT_VERSION_TRACKING=OFF       \
                -S .                                          \
                -B build

      - name: Restore Ccache folder
        id: cache-ccache
        uses: actions/cache/restore@v4
        with:
          key: ${{ steps.cache-key.outputs.ccache-restore-key-1 }}
          restore-keys: ${{ steps.cache-key.outputs.ccache-restore-key-2 }}
          path: ${{ env.CCACHE_DIR }}

      - name: Reset Ccache stats
        run: ccache --zero-stats

      - name: Build project
        id: cmake-build
        run: |
          echo "start=$(date +%s)" >> "$GITHUB_OUTPUT"
          cmake --build build -j "$(nproc)"

      - name: Print Ccache statistics (pre-cleanup)
        run: |
          ccache --show-stats \
                 --show-compression \
                 --verbose

      - name: Cleanup Ccache folder
        run: |
          timestamp="$(date +%s)"
          time_delta="$(( timestamp - ${{ steps.cmake-build.outputs.start }} + 60 ))"
          ccache --evict-older-than="${time_delta}s"
          ccache --recompress=19 --recompress-threads="$(nproc)"
          ccache --cleanup --max-size 1G

      - name: Print Ccache statistics (post-cleanup)
        run: |
          ccache --show-stats \
                 --show-compression \
                 --verbose

      - name: Save Ccache folder
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-key.outputs.ccache-key }}
          path: ${{ env.CCACHE_DIR }}
        env:
          ZSTD_CLEVEL: 1

      - name: Generate list of stale cache entries
        id: stale-cache
        if: steps.cache-ccache.outputs.cache-matched-key != ''
        run: |
          fname='stale-cache-run-clang-tidy.txt'
          echo '${{ steps.cache-ccache.outputs.cache-matched-key }}' > "$fname"

          echo "name=$fname" | tee -a "$GITHUB_OUTPUT"

      - name: Upload stale cache entries
        if: steps.cache-ccache.outputs.cache-matched-key != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.stale-cache.outputs.name }}
          path: "${{ steps.stale-cache.outputs.name }}"
          if-no-files-found: error
          retention-days: 1

  purge-stale-ccache-entries:
    name: Purge stale CCache entries
    needs: [build-project]
    uses: paulsengroup/hictk/.github/workflows/purge-stale-ccache-entries.yml@0a18aef88705bbc2322b4fdd0ddde64d20f6e765
    permissions:
      contents: read
      actions: write

  clang-tidy-status-check:
    name: Status Check (clang-tidy)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - build-project

    steps:
      - name: Collect job results
        if: needs.build-project.result != 'success'
        run: exit 1
