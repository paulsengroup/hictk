# Copyright (C) 2024 Roberto Rossini <roberros@uio.no>
# SPDX-License-Identifier: MIT

name: Build dependencies with Conan (Windows)

on:
  workflow_call:
    outputs:
      conan-key:
        description: "Conan packages"
        value: ${{ jobs.build-deps.outputs.conan-key }}

    inputs:
      conan-version:
        default: "2.17.*"
        type: string
        required: false
        description: "Conan version to be installed with pip."
      cppstd:
        default: "17"
        type: string
        required: false
        description: "Value to pass to compiler.cppstd."
      os:
        type: string
        required: true
        description: "OS used to build Conan deps."

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build-deps:
    name: Build dependencies with Conan (${{ inputs.os }})
    runs-on: ${{ inputs.os }}

    env:
      CMAKE_POLICY_VERSION_MINIMUM: 3.5
      CONAN_HOME: "${{ github.workspace }}\\.conan2"

    outputs:
      conan-key: ${{ steps.generate-cache-key.outputs.conan-key }}

    steps:
      - name: Checkout conanfile.py
        uses: actions/checkout@v4

      - name: Add devtools to PATH
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0

      - name: Generate cache key
        id: generate-cache-key
        run: |
          set -u
          set -e

          hash="${{ hashFiles('conanfile.py') }}"

          cl.exe 1> /dev/null 2> version.txt
          compiler="msvc-$(head -n 1 version.txt | grep -o '[[:digit:].]\+' | head -n 1)"

          suffix="${{ inputs.os }}-$compiler-c++${{ inputs.cppstd }}-$hash"

          echo "conan-key=conan-$suffix" | tee -a "$GITHUB_OUTPUT"

      - name: Lookup package cache
        id: lookup-conan-cache
        uses: actions/cache/restore@v4
        with:
          key: ${{ steps.generate-cache-key.outputs.conan-key }}
          path: |
            ${{ env.CONAN_HOME }}\p
            ${{ github.workspace }}\cmake-prefix-dbg.tar
            ${{ github.workspace }}\cmake-prefix-rel.tar
          lookup-only: true

      - name: Restore package cache
        uses: actions/cache/restore@v4
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.generate-cache-key.outputs.conan-key }}
          path: |
            ${{ env.CONAN_HOME }}\p
            ${{ github.workspace }}\cmake-prefix-dbg.tar
            ${{ github.workspace }}\cmake-prefix-rel.tar

      - uses: actions/setup-python@v5
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        with:
          python-version: "3.13"

      - name: Update build deps
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        run: pip install "conan==${{ inputs.conan-version }}"

      - name: Configure Conan
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        run: |
          conan profile detect --force
          conan_profile="$(conan profile path default)"

          sed -i 's/compiler\.cppstd=.*/compiler.cppstd=${{ inputs.cppstd }}/' "$conan_profile"

          # Newer versions of b2 lead to exceptions like
          # ConanException: These libraries were built, but were not used in any boost module
          cat << EOF | tee -a "$conan_profile"
          [tool_requires]
          boost/*: b2/5.2.1
          EOF

      - name: Clean Conan cache (pre-build)
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        run: conan remove --confirm "*"

      - name: Install dependencies (Debug)
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        run: |
          conan install conanfile.py                  \
             --build='missing'                        \
             --build="b2/*"                           \
             --build="catch2/*"                       \
             -pr:b=default                            \
             -pr:h=default                            \
             -s build_type=Debug                      \
             -s compiler.runtime_type=Debug           \
             -s compiler.cppstd=${{ inputs.cppstd }}  \
             --output-folder cmake-prefix-dbg

          dest="$(cygpath "${{ github.workspace }}/cmake-prefix-dbg.tar")"
          tar -cf "$dest" cmake-prefix-dbg
          rm -r cmake-prefix-dbg

      - name: Install dependencies (Release)
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        run: |
          conan install conanfile.py                  \
             --build='missing'                        \
             --build="b2/*"                           \
             --build="catch2/*"                       \
             -pr:b=default                            \
             -pr:h=default                            \
             -s build_type=Release                    \
             -s compiler.runtime_type=Release         \
             -s compiler.cppstd=${{ inputs.cppstd }}  \
             --output-folder cmake-prefix-rel

          dest="$(cygpath "${{ github.workspace }}/cmake-prefix-rel.tar")"
          tar -cf "$dest" cmake-prefix-rel
          rm -r cmake-prefix-rel

      - name: Clean Conan cache (post-build)
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source

      - name: Save Conan cache
        uses: actions/cache/save@v4
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.generate-cache-key.outputs.conan-key }}
          path: |
            ${{ env.CONAN_HOME }}\p
            ${{ github.workspace }}\cmake-prefix-dbg.tar
            ${{ github.workspace }}\cmake-prefix-rel.tar
        env:
          ZSTD_CLEVEL: 19
